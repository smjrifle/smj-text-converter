/*
 * SmjrifeTextConverterView.java
 * This is basically a program to convert Strings to Binary, Hex, Ascii, Octal, Base64 and various hash algorithm
 */
package smjrifetextconverter;
import java.io.IOException;
import java.util.Scanner;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import java.awt.event.*;
import javax.swing.JOptionPane;
import java.io.UnsupportedEncodingException; 
import java.security.MessageDigest;
import sun.misc.BASE64Encoder;
import sun.misc.BASE64Decoder;





/**
 * The application's main frame.
 */
public class SmjrifeTextConverterView extends FrameView {

    public SmjrifeTextConverterView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer) (evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }
//About Box to display information
    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = SmjrifeTextConverterApp.getApplication().getMainFrame();
            SmjrifeTextConverterApp.getApplication().getMainFrame().setResizable(false);
            aboutBox = new SmjrifeTextConverterAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        SmjrifeTextConverterApp.getApplication().show(aboutBox);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jToggleButton2 = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea6 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        jToggleButton6 = new javax.swing.JToggleButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(smjrifetextconverter.SmjrifeTextConverterApp.class).getContext().getResourceMap(SmjrifeTextConverterView.class);
        mainPanel.setBackground(resourceMap.getColor("mainPanel.background")); // NOI18N
        mainPanel.setAlignmentX(0.2F);
        mainPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        mainPanel.setDoubleBuffered(false);
        mainPanel.setMinimumSize(new java.awt.Dimension(1290, 521));
        mainPanel.setName("mainPanel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTextArea1.setColumns(27);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setName("jTextArea1"); // NOI18N
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextArea1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTextArea2.setColumns(20);
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setName("jTextArea2"); // NOI18N
        jTextArea2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea2KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextArea2KeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea2);

        jToggleButton1.setText(resourceMap.getString("jToggleButton1.text")); // NOI18N
        jToggleButton1.setName("jToggleButton1"); // NOI18N
        jToggleButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jToggleButton1MouseClicked(evt);
            }
        });

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setForeground(resourceMap.getColor("jLabel4.foreground")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel2.setForeground(resourceMap.getColor("jLabel4.foreground")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        jTextArea3.setColumns(20);
        jTextArea3.setLineWrap(true);
        jTextArea3.setRows(5);
        jTextArea3.setName("jTextArea3"); // NOI18N
        jTextArea3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextArea3KeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jTextArea3);

        jToggleButton2.setText(resourceMap.getString("jToggleButton2.text")); // NOI18N
        jToggleButton2.setName("jToggleButton2"); // NOI18N
        jToggleButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jToggleButton2MouseClicked(evt);
            }
        });

        jLabel3.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel3.setForeground(resourceMap.getColor("jLabel4.foreground")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        jTextArea4.setColumns(20);
        jTextArea4.setLineWrap(true);
        jTextArea4.setRows(5);
        jTextArea4.setName("jTextArea4"); // NOI18N
        jTextArea4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextArea4KeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(jTextArea4);

        jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel4.setForeground(resourceMap.getColor("jLabel4.foreground")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jScrollPane5.setName("jScrollPane5"); // NOI18N

        jTextArea5.setColumns(20);
        jTextArea5.setLineWrap(true);
        jTextArea5.setRows(5);
        jTextArea5.setName("jTextArea5"); // NOI18N
        jTextArea5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextArea5KeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(jTextArea5);

        jScrollPane6.setName("jScrollPane6"); // NOI18N

        jTextArea6.setColumns(20);
        jTextArea6.setLineWrap(true);
        jTextArea6.setRows(5);
        jTextArea6.setName("jTextArea6"); // NOI18N
        jTextArea6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextArea6KeyReleased(evt);
            }
        });
        jScrollPane6.setViewportView(jTextArea6);

        jLabel5.setFont(resourceMap.getFont("jLabel5.font")); // NOI18N
        jLabel5.setForeground(resourceMap.getColor("jLabel5.foreground")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setFont(resourceMap.getFont("jLabel6.font")); // NOI18N
        jLabel6.setForeground(resourceMap.getColor("jLabel6.foreground")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jScrollPane7.setName("jScrollPane7"); // NOI18N

        jTextArea7.setColumns(27);
        jTextArea7.setLineWrap(true);
        jTextArea7.setRows(5);
        jTextArea7.setName("jTextArea7"); // NOI18N
        jTextArea7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextArea7KeyReleased(evt);
            }
        });
        jScrollPane7.setViewportView(jTextArea7);

        jLabel7.setFont(resourceMap.getFont("jLabel7.font")); // NOI18N
        jLabel7.setForeground(resourceMap.getColor("jLabel7.foreground")); // NOI18N
        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jLabel8.setFont(resourceMap.getFont("jLabel8.font")); // NOI18N
        jLabel8.setForeground(resourceMap.getColor("jLabel8.foreground")); // NOI18N
        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        jLabel9.setFont(resourceMap.getFont("jLabel9.font")); // NOI18N
        jLabel9.setForeground(resourceMap.getColor("jLabel9.foreground")); // NOI18N
        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        jToggleButton3.setText(resourceMap.getString("jToggleButton3.text")); // NOI18N
        jToggleButton3.setName("jToggleButton3"); // NOI18N
        jToggleButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jToggleButton3MouseClicked(evt);
            }
        });

        jToggleButton4.setText(resourceMap.getString("jToggleButton4.text")); // NOI18N
        jToggleButton4.setName("jToggleButton4"); // NOI18N
        jToggleButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jToggleButton4MouseClicked(evt);
            }
        });

        jToggleButton6.setText(resourceMap.getString("jToggleButton6.text")); // NOI18N
        jToggleButton6.setName("jToggleButton6"); // NOI18N
        jToggleButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jToggleButton6MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(jLabel1)
                        .addGap(221, 221, 221)
                        .addComponent(jLabel2)
                        .addGap(227, 227, 227)
                        .addComponent(jLabel3)
                        .addGap(243, 243, 243)
                        .addComponent(jLabel4))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(223, 223, 223)
                                .addComponent(jLabel7)
                                .addGap(235, 235, 235)
                                .addComponent(jLabel5))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(208, 208, 208)
                                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(170, 170, 170)
                                .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(188, 188, 188)
                                .addComponent(jToggleButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane2)))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane7, 0, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel8)))))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jToggleButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(200, 200, 200)
                        .addComponent(jToggleButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(100, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jToggleButton4, 0, 0, Short.MAX_VALUE)
                            .addComponent(jToggleButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, Short.MAX_VALUE))
                        .addGap(44, 44, 44))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addGap(162, 162, 162))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(smjrifetextconverter.SmjrifeTextConverterApp.class).getContext().getActionMap(SmjrifeTextConverterView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 1290, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1266, Short.MAX_VALUE)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                .addContainerGap(939, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(201, 201, 201))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(statusMessageLabel)
                        .addComponent(statusAnimationLabel))
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents
//This is pretty useless
private void jTextArea2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea2KeyPressed
    String c = jTextArea2.getText();
    char ch;
    Integer i;
    Integer j;
    String out = "";
    for (i = 0; i < c.length(); i++) {
        ch = c.charAt(i);
        j = (int) ch;
        out = out + Integer.toBinaryString(j) + " ";
        if (Integer.toBinaryString(j).length() < 8) {
            int len = 8 - Integer.toBinaryString(j).length();
            //JOptionPane.showMessageDialog(null,len);
            while (len != 0) {
                out = "0" + out;
                len--;
            }
        }
        jTextArea1.setText(out);
    }
}//GEN-LAST:event_jTextArea2KeyPressed
//Binary to Others
private void jToggleButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton1MouseClicked
    String c = jTextArea1.getText();
    //01100001 00100000 00101110 00101100 00101110 JOptionPane.showMessageDialog(null,c);
    int len = c.length() + 1;
    int count;
    int asc = 0;
    int bin;
    int base;
    String asec = "";
    int index = 0;
int iter=0;
    while (iter!=c.length()) {
iter++;
    //8 bit? so going for formula
        base = 7;
        for (count = index; count < index + 8; count++) {
            bin = c.charAt(count) - 48;
//if 1 then multiply by base
            if (bin == 1) {
                asc = asc + (int) Math.pow(2, base);
            }
            //JOptionPane.showMessageDialog(null,asc);
            base--;
                    // JOptionPane.showMessageDialog(null,iter);
        }
        //Creating a string
        byte[] bytes = new byte[1];
        bytes[0] = (byte) asc;
        asec = asec + new String(bytes);
        jTextArea2.setText(asec);
        
        index = count+1;
       // JOptionPane.showMessageDialog(null,index);
        len = len - index;
        asc = 0;
    }
    //Change Function to change all text style
    change();
}//GEN-LAST:event_jToggleButton1MouseClicked
//This is the Event for String; changes string to various formats
private void jTextArea2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea2KeyReleased
String c= jTextArea2.getText();
    char ch;
    Integer i;
    Integer j;
    String out="";
    String hex="";
    String strg="";
    String ascii="";
    String Oct="";
    
   
        for(i=0;i<c.length();i++)
    {
        ch=c.charAt(i);
        j=(int)ch;
        hex=hex+Integer.toHexString(j)+" ";
        ascii=ascii+j+" ";
        Oct=Oct+Integer.toOctalString(j)+" ";
        byte[] bytesOfMessage = null;
            try {
                bytesOfMessage = c.getBytes("UTF-8");
            } catch (UnsupportedEncodingException ex) {
                //Logger.getLogger(SmjrifeTextConverterView.class.getName()).log(Level.SEVERE, null, ex);
            }
//Message Digest algorithm to generate hash
         MessageDigest md = null;
         MessageDigest md2 = null;
            try {
                md=MessageDigest.getInstance("MD5");
                md2=MessageDigest.getInstance("MD2");
            } catch (NoSuchAlgorithmException ex) {
                
            }
           byte[] MD5v=md.digest(bytesOfMessage);
           byte[] MD2v=md.digest(bytesOfMessage);
           StringBuffer sb= new StringBuffer();
           StringBuffer sb2= new StringBuffer();
           for(byte b : MD5v) {
               sb.append(Integer.toHexString((int)(b&0xff)));
           }
           for(byte b : MD2v) {
               sb2.append(Integer.toHexString((int)(b&0xff)));
           }
           String strmd=(sb.toString());
           String strmd2=(sb2.toString());
           if(strmd.length()<32)
           {
               int l=32-strmd.length();
               while(l!=0)
               {strmd="0"+strmd;l--;}
           }
         MessageDigest sha = null;
         MessageDigest sha2 = null;
         MessageDigest sha3 = null;
         MessageDigest sha5 = null;
            try {
                //and this time we have SHA too ;)
                sha=MessageDigest.getInstance("SHA1");
                sha2=MessageDigest.getInstance("SHA-256");
                sha3=MessageDigest.getInstance("SHA-384");
                sha5=MessageDigest.getInstance("SHA-512");
            } catch (NoSuchAlgorithmException ex) {
                
            }
           byte[] MD5s=sha.digest(bytesOfMessage);
            byte[] MD5s2=sha2.digest(bytesOfMessage);
            byte[] MD5s3=sha3.digest(bytesOfMessage);
            byte[] MD5s5=sha5.digest(bytesOfMessage);
           StringBuffer sbs= new StringBuffer();
           StringBuffer sbs2= new StringBuffer();
           StringBuffer sbs3= new StringBuffer();
           StringBuffer sbs5= new StringBuffer();
           for(byte b : MD5s) {
               sbs.append(Integer.toHexString((int)(b&0xff)));
           }
           for(byte b : MD5s2) {
               sbs2.append(Integer.toHexString((int)(b&0xff)));
           }
           for(byte b : MD5s3) {
               sbs3.append(Integer.toHexString((int)(b&0xff)));
           }
           for(byte b : MD5s5) {
               sbs5.append(Integer.toHexString((int)(b&0xff)));
           }
           String strmds=(sbs.toString());
           String strmds2=(sbs2.toString());
           String strmds3=(sbs3.toString());
           String strmds5=(sbs5.toString());
           
          
        if(Integer.toBinaryString(j).length()<8)
        {
            int len=8-Integer.toBinaryString(j).length();
            
            //JOptionPane.showMessageDialog(null,len);
            while(len!=0)
            {out="0"+out;
                len--;}
            
        }
        strg =strg+out+ Integer.toBinaryString(j)+" ";
        //How can we forget the good Base64 converstion
        BASE64Encoder encoder = new BASE64Encoder();
        String encodedBytes;
     
       encodedBytes = encoder.encodeBuffer(c.getBytes());
      
     
    jTextArea1.setText(strg);
    jTextArea3.setText(hex);
    jTextArea4.setText(ascii);
    jTextArea5.setText(Oct);
    jTextArea7.setText(encodedBytes);
    jTextArea6.setText("MD2: "+strmd2+"\nMD5: "+strmd+"\n"+"SHA1: "+strmds+"\n"+"SHA-256: "+strmds2+"\n"+"SHA-384: "+strmds3+"\n"+"SHA-512: "+strmds5);
    
    out="";
    }

}//GEN-LAST:event_jTextArea2KeyReleased

private void jTextArea1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyReleased
    //For binary disable other keys except 0 and 1                          
    if(!evt.isControlDown())
                                if (!(evt.getKeyChar() >= '0' && evt.getKeyChar() <= '1' )) {
                                        if( evt.getKeyCode()!=KeyEvent.VK_ENTER )
                                            if(evt.getKeyCode()!=KeyEvent.VK_CONTROL)
                                        //JOptionPane.showMessageDialog(null,"Only Binary Digits (0 and 1)","Errorrr...",JOptionPane.INFORMATION_MESSAGE);
                                       jTextArea1.setText(jTextArea1.getText().substring(0, jTextArea1.getText().length()-1));
                                       evt.consume();
                                }

}//GEN-LAST:event_jTextArea1KeyReleased

private void jTextArea3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea3KeyReleased
// TODO add your handling code here:
}//GEN-LAST:event_jTextArea3KeyReleased
//This is hex to decimal string
private void jToggleButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton2MouseClicked
String st=jTextArea3.getText();
//int inte=Integer.valueOf(st, 16).intValue();
//String stc=Integer.toString(inte);
//String out="";
	  StringBuilder sb = new StringBuilder();
	  StringBuilder temp = new StringBuilder();

	  //i+3 so as to remove space too
	  for( int i=0; i<st.length()-1; i+=3 ){

	      //grab the hex in pairs
	      String output = st.substring(i, (i + 2));
	      //convert hex to decimal
	      int decimal = Integer.parseInt(output, 16);
	      //convert the decimal to character
	      sb.append((char)decimal);

	      temp.append(decimal);
	  }

	 jTextArea2.setText(sb.toString());
         change();
}//GEN-LAST:event_jToggleButton2MouseClicked

private void jTextArea4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea4KeyReleased
// TODO add your handling code here:
}//GEN-LAST:event_jTextArea4KeyReleased

private void jTextArea5KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea5KeyReleased
// TODO add your handling code here:
}//GEN-LAST:event_jTextArea5KeyReleased

private void jTextArea6KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea6KeyReleased
// TODO add your handling code here:
}//GEN-LAST:event_jTextArea6KeyReleased

private void jTextArea7KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea7KeyReleased
// TODO add your handling code here:
}//GEN-LAST:event_jTextArea7KeyReleased
//Function for AscII
private void jToggleButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton3MouseClicked
String st=jTextArea4.getText();

	  StringBuilder sb = new StringBuilder();
	  StringBuilder temp = new StringBuilder();
String[] arr = st.split(" ");

for (String s : arr)
{
    int decimal = Integer.valueOf(s).intValue();
              //convert the decimal to character
	      sb.append((char)decimal);
	      temp.append(decimal);
}
jTextArea2.setText(sb.toString());
         change();
}//GEN-LAST:event_jToggleButton3MouseClicked
//Function for base64 Decode
private void jToggleButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton4MouseClicked
String c=jTextArea7.getText();
    BASE64Decoder decoder = new BASE64Decoder();
    byte[] decodedBytes = null;
        try {
            decodedBytes = decoder.decodeBuffer(c);
            //System.out.println("decodedBytes " + new String(decodedBytes));
        } catch (IOException ex) {
            Logger.getLogger(SmjrifeTextConverterView.class.getName()).log(Level.SEVERE, null, ex);
        }
    
        
       jTextArea2.setText(new String(decodedBytes));
       change();
}//GEN-LAST:event_jToggleButton4MouseClicked
//this one is for octal
private void jToggleButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton6MouseClicked
String c=jTextArea5.getText();
int len = c.length() + 1;
    int count;
    //int asc = 0;
    int bin;
    int base;
    String occ="";
    //String asec = "";
    int index = 0;
     StringBuilder asec = new StringBuilder();
	  StringBuilder temp = new StringBuilder();

    String[] arr = c.split(" ");
    int is=0;
   // while(is!=c.length())
for (String s : arr)
{String ss = arr[is++];
int asc = Integer.parseInt(ss, 8);
       
          asec.append((char)asc);
	      temp.append(asc);
        
        jTextArea2.setText(asec.toString());
        
       
    }
        change();

}//GEN-LAST:event_jToggleButton6MouseClicked
//jtextArea2.getDocument().addDocumentListener(new MyDocumentListener());


//A Public Function that is called when trying to convert from various format. does change to all from string
//To use just set jTextArea2 text to its proper format call and all will auto convert
public void change()
    {
String c= jTextArea2.getText();
    char ch;
    Integer i;
    Integer j;
    String out="";
    String hex="";
    String strg="";
    String ascii="";
    String Oct="";


        for(i=0;i<c.length();i++)
    {
        ch=c.charAt(i);
        j=(int)ch;
        hex=hex+Integer.toHexString(j)+" ";
        ascii=ascii+j+" ";
        Oct=Oct+Integer.toOctalString(j)+" ";
        byte[] bytesOfMessage = null;
            try {
                bytesOfMessage = c.getBytes("UTF-8");
            } catch (UnsupportedEncodingException ex) {
                //Logger.getLogger(SmjrifeTextConverterView.class.getName()).log(Level.SEVERE, null, ex);
            }

         MessageDigest md = null;
         MessageDigest md2 = null;
            try {
                md=MessageDigest.getInstance("MD5");
                md2=MessageDigest.getInstance("MD2");
            } catch (NoSuchAlgorithmException ex) {

            }
           byte[] MD5v=md.digest(bytesOfMessage);
           byte[] MD2v=md.digest(bytesOfMessage);
           StringBuffer sb= new StringBuffer();
           StringBuffer sb2= new StringBuffer();
           for(byte b : MD5v) {
               sb.append(Integer.toHexString((int)(b&0xff)));
           }
           for(byte b : MD2v) {
               sb2.append(Integer.toHexString((int)(b&0xff)));
           }
           String strmd=(sb.toString());
           String strmd2=(sb2.toString());
           if(strmd.length()<32)
           {
               int l=32-strmd.length();
               while(l!=0)
               {strmd="0"+strmd;l--;}
           }
         MessageDigest sha = null;
         MessageDigest sha2 = null;
         MessageDigest sha3 = null;
         MessageDigest sha5 = null;
            try {
                sha=MessageDigest.getInstance("SHA1");
                sha2=MessageDigest.getInstance("SHA-256");
                sha3=MessageDigest.getInstance("SHA-384");
                sha5=MessageDigest.getInstance("SHA-512");
            } catch (NoSuchAlgorithmException ex) {

            }
           byte[] MD5s=sha.digest(bytesOfMessage);
            byte[] MD5s2=sha2.digest(bytesOfMessage);
            byte[] MD5s3=sha3.digest(bytesOfMessage);
            byte[] MD5s5=sha5.digest(bytesOfMessage);
           StringBuffer sbs= new StringBuffer();
           StringBuffer sbs2= new StringBuffer();
           StringBuffer sbs3= new StringBuffer();
           StringBuffer sbs5= new StringBuffer();
           for(byte b : MD5s) {
               sbs.append(Integer.toHexString((int)(b&0xff)));
           }
           for(byte b : MD5s2) {
               sbs2.append(Integer.toHexString((int)(b&0xff)));
           }
           for(byte b : MD5s3) {
               sbs3.append(Integer.toHexString((int)(b&0xff)));
           }
           for(byte b : MD5s5) {
               sbs5.append(Integer.toHexString((int)(b&0xff)));
           }
           String strmds=(sbs.toString());
           String strmds2=(sbs2.toString());
           String strmds3=(sbs3.toString());
           String strmds5=(sbs5.toString());


        if(Integer.toBinaryString(j).length()<8)
        {
            int len=8-Integer.toBinaryString(j).length();

            //JOptionPane.showMessageDialog(null,len);
            while(len!=0)
            {out="0"+out;
                len--;}

        }
        strg =strg+out+ Integer.toBinaryString(j)+" ";
        BASE64Encoder encoder = new BASE64Encoder();
        String encodedBytes;

       encodedBytes = encoder.encodeBuffer(c.getBytes());
        // byte[] decodedBytes = decoder.decodeBuffer(encodedBytes);
       //System.out.println("decodedBytes " + new String(decodedBytes));

    jTextArea1.setText(strg);
    jTextArea3.setText(hex);
    jTextArea4.setText(ascii);
    jTextArea5.setText(Oct);
    jTextArea7.setText(encodedBytes);
    jTextArea6.setText("MD2: "+strmd2+"\nMD5: "+strmd+"\n"+"SHA1: "+strmds+"\n"+"SHA-256: "+strmds2+"\n"+"SHA-384: "+strmds3+"\n"+"SHA-512: "+strmds5);

    out="";
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextArea jTextArea6;
    private javax.swing.JTextArea jTextArea7;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JToggleButton jToggleButton6;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;
    
    
}
